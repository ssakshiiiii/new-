{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SAKSHI SINGH\\\\OneDrive\\\\Desktop\\\\test-master\\\\src\\\\components\\\\MergeSort.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport mergeSortSound from '../assets/mergeSortSound.mp3';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MergeSort = () => {\n  _s();\n  const myState = useSelector(state => state.updateProps);\n  const dispatch = useDispatch();\n  const [audio] = useState(() => new Audio(mergeSortSound));\n  let values = myState.values.map(item => item[0]);\n  let ids = myState.values.map(item => item[1]);\n  const merge = (values, ids, timer, l, mid, r) => {\n    let leftArray = values.slice(l, mid + 1);\n    let rightArray = values.slice(mid + 1, r + 1);\n    let i = 0,\n      j = 0,\n      k = l;\n    while (i < leftArray.length && j < rightArray.length) {\n      if (leftArray[i] <= rightArray[j]) {\n        values[k] = leftArray[i];\n        i++;\n      } else {\n        values[k] = rightArray[j];\n        j++;\n      }\n      k++;\n    }\n    while (i < leftArray.length) {\n      values[k] = leftArray[i];\n      i++;\n      k++;\n    }\n    while (j < rightArray.length) {\n      values[k] = rightArray[j];\n      j++;\n      k++;\n    }\n\n    // Visualize the merge operation and show toast notification\n    setTimeout(() => {\n      toast.success(`Merged subarray from index ${l} to ${r}`, {\n        position: toast.POSITION.TOP_RIGHT\n      });\n      for (let i = l; i <= r; i++) {\n        document.getElementById(ids[i]).style.transform = `translateX(${i * 11}px)`;\n      }\n    }, timer * myState.speed);\n    return values;\n  };\n  const mergeSort = (values, ids, timer, l, r) => {\n    if (l >= r) return;\n    let mid = Math.floor((l + r) / 2);\n    mergeSort(values, ids, timer - 1, l, mid);\n    mergeSort(values, ids, timer - 1, mid + 1, r);\n\n    // Merge the sorted subarrays\n    merge(values, ids, timer, l, mid, r);\n  };\n  const solve = () => {\n    mergeSort(values, ids, Math.ceil(Math.log(values.length + 1)), 0, values.length - 1);\n    setTimeout(() => {\n      dispatch({\n        type: 'PLAY_PAUSE',\n        _play: false\n      });\n      dispatch({\n        type: 'UPDATE_COLOR',\n        color: 'rgb(0, 182, 0)'\n      });\n    }, 5 * myState.speed * (1 + Math.ceil(Math.log(values.length + 1))) + 50);\n  };\n  useEffect(() => {\n    if (myState.algorithm === 'merge') {\n      if (myState.play) solve();\n    }\n  }, [myState.play]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(MergeSort, \"dA9O5c/TSNU1RgbnU8GeENeuVF8=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = MergeSort;\nexport default MergeSort;\nvar _c;\n$RefreshReg$(_c, \"MergeSort\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","mergeSortSound","ToastContainer","toast","jsxDEV","_jsxDEV","Fragment","_Fragment","MergeSort","_s","myState","state","updateProps","dispatch","audio","Audio","values","map","item","ids","merge","timer","l","mid","r","leftArray","slice","rightArray","i","j","k","length","setTimeout","success","position","POSITION","TOP_RIGHT","document","getElementById","style","transform","speed","mergeSort","Math","floor","solve","ceil","log","type","_play","color","algorithm","play","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SAKSHI SINGH/OneDrive/Desktop/test-master/src/components/MergeSort.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport mergeSortSound from '../assets/mergeSortSound.mp3';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst MergeSort = () => {\n  const myState = useSelector((state) => state.updateProps);\n  const dispatch = useDispatch();\n\n  const [audio] = useState(() => new Audio(mergeSortSound));\n\n  let values = myState.values.map((item) => item[0]);\n  let ids = myState.values.map((item) => item[1]);\n\n  const merge = (values, ids, timer, l, mid, r) => {\n    let leftArray = values.slice(l, mid + 1);\n    let rightArray = values.slice(mid + 1, r + 1);\n\n    let i = 0,\n      j = 0,\n      k = l;\n    while (i < leftArray.length && j < rightArray.length) {\n      if (leftArray[i] <= rightArray[j]) {\n        values[k] = leftArray[i];\n        i++;\n      } else {\n        values[k] = rightArray[j];\n        j++;\n      }\n      k++;\n    }\n\n    while (i < leftArray.length) {\n      values[k] = leftArray[i];\n      i++;\n      k++;\n    }\n\n    while (j < rightArray.length) {\n      values[k] = rightArray[j];\n      j++;\n      k++;\n    }\n\n    // Visualize the merge operation and show toast notification\n    setTimeout(() => {\n      toast.success(`Merged subarray from index ${l} to ${r}`, {\n        position: toast.POSITION.TOP_RIGHT,\n      });\n\n      for (let i = l; i <= r; i++) {\n        document.getElementById(ids[i]).style.transform = `translateX(${i * 11}px)`;\n      }\n    }, timer * myState.speed);\n\n    return values;\n  };\n\n  const mergeSort = (values, ids, timer, l, r) => {\n    if (l >= r) return;\n\n    let mid = Math.floor((l + r) / 2);\n\n    mergeSort(values, ids, timer - 1, l, mid);\n    mergeSort(values, ids, timer - 1, mid + 1, r);\n\n    // Merge the sorted subarrays\n    merge(values, ids, timer, l, mid, r);\n  };\n\n  const solve = () => {\n    mergeSort(values, ids, Math.ceil(Math.log(values.length + 1)), 0, values.length - 1);\n\n    setTimeout(() => {\n      dispatch({\n        type: 'PLAY_PAUSE',\n        _play: false,\n      });\n\n      dispatch({\n        type: 'UPDATE_COLOR',\n        color: 'rgb(0, 182, 0)',\n      });\n    }, 5 * myState.speed * (1 + Math.ceil(Math.log(values.length + 1))) + 50);\n  };\n\n  useEffect(() => {\n    if (myState.algorithm === 'merge') {\n      if (myState.play) solve();\n    }\n  }, [myState.play]);\n\n  return (\n    <>\n      <ToastContainer />\n    </>\n  );\n};\n\nexport default MergeSort;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}