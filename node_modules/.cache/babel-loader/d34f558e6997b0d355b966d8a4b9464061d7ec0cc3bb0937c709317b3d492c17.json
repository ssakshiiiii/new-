{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SAKSHI SINGH\\\\OneDrive\\\\Desktop\\\\test-master\\\\src\\\\components\\\\InsertionSort.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport insertionSortSound from '../assets/insertionSortSound.mp3';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst InsertionSort = () => {\n  _s();\n  const myState = useSelector(state => state.updateProps);\n  const dispatch = useDispatch();\n  const [audio] = useState(new Audio(insertionSortSound));\n\n  // Extract values and ids from state\n  let values = myState.values.map(item => item[0]);\n  let ids = myState.values.map(item => item[1]);\n\n  // Function to solve insertion sort\n  const solve = () => {\n    let timer = 0;\n    for (let i = 0; i < values.length - 1; i++) {\n      let ind = i + 1;\n      while (ind > 0 && values[ind] < values[ind - 1]) {\n        let j = ind;\n\n        // Swap values and ids\n        let temp = values[j];\n        values[j] = values[j - 1];\n        values[j - 1] = temp;\n        temp = ids[j];\n        ids[j] = ids[j - 1];\n        ids[j - 1] = temp;\n        let new_ids = [...ids];\n\n        // Display toast notification\n        setTimeout(() => {\n          toast.success(`${values[j]} is sorted`, {\n            position: toast.POSITION.TOP_RIGHT\n          });\n        }, timer * myState.speed);\n\n        // Update visual representation\n        setTimeout(() => {\n          document.getElementById(new_ids[j]).style.transform = `translateX(${j * 11}px)`;\n          document.getElementById(new_ids[j - 1]).childNodes[1].style.backgroundColor = 'black';\n          setTimeout(() => {\n            document.getElementById(new_ids[j - 1]).childNodes[1].style.backgroundColor = myState.color;\n          }, myState.speed - 10);\n          document.getElementById(new_ids[j - 1]).style.transform = `translateX(${(j - 1) * 11}px)`;\n        }, timer * myState.speed);\n        timer++;\n        ind--;\n      }\n    }\n\n    // Dispatch actions to update state\n    setTimeout(() => {\n      dispatch({\n        type: 'PLAY_PAUSE',\n        _play: false\n      });\n      dispatch({\n        type: 'UPDATE_COLOR',\n        color: 'rgb(0, 182, 0)'\n      });\n    }, (timer + 1) * myState.speed + 50); // Adjust timeout for completion\n  };\n  useEffect(() => {\n    if (myState.algorithm === 'insertion') {\n      if (myState.play) {\n        solve();\n      }\n    }\n  }, [myState.play]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(InsertionSort, \"rAbxQQWu3Gx19F4qje1ToCqTTmA=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = InsertionSort;\nexport default InsertionSort;\nvar _c;\n$RefreshReg$(_c, \"InsertionSort\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","ToastContainer","toast","insertionSortSound","jsxDEV","_jsxDEV","Fragment","_Fragment","InsertionSort","_s","myState","state","updateProps","dispatch","audio","Audio","values","map","item","ids","solve","timer","i","length","ind","j","temp","new_ids","setTimeout","success","position","POSITION","TOP_RIGHT","speed","document","getElementById","style","transform","childNodes","backgroundColor","color","type","_play","algorithm","play","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SAKSHI SINGH/OneDrive/Desktop/test-master/src/components/InsertionSort.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport insertionSortSound from '../assets/insertionSortSound.mp3';\n\nconst InsertionSort = () => {\n  const myState = useSelector((state) => state.updateProps);\n  const dispatch = useDispatch();\n  const [audio] = useState(new Audio(insertionSortSound));\n\n  // Extract values and ids from state\n  let values = myState.values.map((item) => item[0]);\n  let ids = myState.values.map((item) => item[1]);\n\n  // Function to solve insertion sort\n  const solve = () => {\n    let timer = 0;\n\n    for (let i = 0; i < values.length - 1; i++) {\n      let ind = i + 1;\n\n      while (ind > 0 && values[ind] < values[ind - 1]) {\n        let j = ind;\n\n        // Swap values and ids\n        let temp = values[j];\n        values[j] = values[j - 1];\n        values[j - 1] = temp;\n\n        temp = ids[j];\n        ids[j] = ids[j - 1];\n        ids[j - 1] = temp;\n\n        let new_ids = [...ids];\n\n        // Display toast notification\n        setTimeout(() => {\n          toast.success(`${values[j]} is sorted`, {\n            position: toast.POSITION.TOP_RIGHT,\n          });\n        }, timer * myState.speed);\n\n        // Update visual representation\n        setTimeout(() => {\n          document.getElementById(new_ids[j]).style.transform = `translateX(${j * 11}px)`;\n          document.getElementById(new_ids[j - 1]).childNodes[1].style.backgroundColor = 'black';\n\n          setTimeout(() => {\n            document.getElementById(new_ids[j - 1]).childNodes[1].style.backgroundColor = myState.color;\n          }, myState.speed - 10);\n\n          document.getElementById(new_ids[j - 1]).style.transform = `translateX(${(j - 1) * 11}px)`;\n        }, timer * myState.speed);\n\n        timer++;\n        ind--;\n      }\n    }\n\n    // Dispatch actions to update state\n    setTimeout(() => {\n      dispatch({\n        type: 'PLAY_PAUSE',\n        _play: false,\n      });\n\n      dispatch({\n        type: 'UPDATE_COLOR',\n        color: 'rgb(0, 182, 0)',\n      });\n    }, (timer + 1) * myState.speed + 50); // Adjust timeout for completion\n  };\n\n  useEffect(() => {\n    if (myState.algorithm === 'insertion') {\n      if (myState.play) {\n        solve();\n      }\n    }\n  }, [myState.play]);\n\n  return (\n    <>\n      <ToastContainer />\n    </>\n  );\n};\n\nexport default InsertionSort;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}