{"ast":null,"code":"const childProcess = require('child_process');\nconst SayPlatformBase = require('./base.js');\nconst BASE_SPEED = 0; // Unsupported\nconst COMMAND = 'powershell';\nclass SayPlatformWin32 extends SayPlatformBase {\n  constructor() {\n    super();\n    this.baseSpeed = BASE_SPEED;\n  }\n  buildSpeakCommand({\n    text,\n    voice,\n    speed\n  }) {\n    let args = [];\n    let pipedData = '';\n    let options = {};\n    let psCommand = `Add-Type -AssemblyName System.speech;$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer;`;\n    if (voice) {\n      psCommand += `$speak.SelectVoice('${voice}');`;\n    }\n    if (speed) {\n      let adjustedSpeed = this.convertSpeed(speed || 1);\n      psCommand += `$speak.Rate = ${adjustedSpeed};`;\n    }\n    psCommand += `$speak.Speak([Console]::In.ReadToEnd())`;\n    pipedData += text;\n    args.push(psCommand);\n    options.shell = true;\n    return {\n      command: COMMAND,\n      args,\n      pipedData,\n      options\n    };\n  }\n  buildExportCommand({\n    text,\n    voice,\n    speed,\n    filename\n  }) {\n    let args = [];\n    let pipedData = '';\n    let options = {};\n    let psCommand = `Add-Type -AssemblyName System.speech;$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer;`;\n    if (voice) {\n      psCommand += `$speak.SelectVoice('${voice}');`;\n    }\n    if (speed) {\n      let adjustedSpeed = this.convertSpeed(speed || 1);\n      psCommand += `$speak.Rate = ${adjustedSpeed};`;\n    }\n    if (!filename) throw new Error('Filename must be provided in export();');else {\n      psCommand += `$speak.SetOutputToWaveFile('${filename}');`;\n    }\n    psCommand += `$speak.Speak([Console]::In.ReadToEnd());$speak.Dispose()`;\n    pipedData += text;\n    args.push(psCommand);\n    options.shell = true;\n    return {\n      command: COMMAND,\n      args,\n      pipedData,\n      options\n    };\n  }\n  runStopCommand() {\n    this.child.stdin.pause();\n    childProcess.exec(`taskkill /pid ${this.child.pid} /T /F`);\n  }\n  convertSpeed(speed) {\n    // Overriden to map playback speed (as a ratio) to Window's values (-10 to 10, zero meaning x1.0)\n    return Math.max(-10, Math.min(Math.round(9.0686 * Math.log(speed) - 0.1806), 10));\n  }\n  getVoices() {\n    let args = [];\n    let psCommand = 'Add-Type -AssemblyName System.speech;$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer;$speak.GetInstalledVoices() | % {$_.VoiceInfo.Name}';\n    args.push(psCommand);\n    return {\n      command: COMMAND,\n      args\n    };\n  }\n}\nmodule.exports = SayPlatformWin32;","map":{"version":3,"names":["childProcess","require","SayPlatformBase","BASE_SPEED","COMMAND","SayPlatformWin32","constructor","baseSpeed","buildSpeakCommand","text","voice","speed","args","pipedData","options","psCommand","adjustedSpeed","convertSpeed","push","shell","command","buildExportCommand","filename","Error","runStopCommand","child","stdin","pause","exec","pid","Math","max","min","round","log","getVoices","module","exports"],"sources":["C:/Users/SAKSHI SINGH/OneDrive/Desktop/test-master/node_modules/say/platform/win32.js"],"sourcesContent":["const childProcess = require('child_process')\n\nconst SayPlatformBase = require('./base.js')\n\nconst BASE_SPEED = 0 // Unsupported\nconst COMMAND = 'powershell'\n\nclass SayPlatformWin32 extends SayPlatformBase {\n  constructor () {\n    super()\n    this.baseSpeed = BASE_SPEED\n  }\n\n  buildSpeakCommand ({ text, voice, speed }) {\n    let args = []\n    let pipedData = ''\n    let options = {}\n\n    let psCommand = `Add-Type -AssemblyName System.speech;$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer;`\n\n    if (voice) {\n      psCommand += `$speak.SelectVoice('${voice}');`\n    }\n\n    if (speed) {\n      let adjustedSpeed = this.convertSpeed(speed || 1)\n      psCommand += `$speak.Rate = ${adjustedSpeed};`\n    }\n\n    psCommand += `$speak.Speak([Console]::In.ReadToEnd())`\n\n    pipedData += text\n    args.push(psCommand)\n    options.shell = true\n\n    return { command: COMMAND, args, pipedData, options }\n  }\n\n  buildExportCommand ({ text, voice, speed, filename }) {\n    let args = []\n    let pipedData = ''\n    let options = {}\n\n    let psCommand = `Add-Type -AssemblyName System.speech;$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer;`\n\n    if (voice) {\n      psCommand += `$speak.SelectVoice('${voice}');`\n    }\n\n    if (speed) {\n      let adjustedSpeed = this.convertSpeed(speed || 1)\n      psCommand += `$speak.Rate = ${adjustedSpeed};`\n    }\n\n    if (!filename) throw new Error('Filename must be provided in export();')\n    else {\n      psCommand += `$speak.SetOutputToWaveFile('${filename}');`\n    }\n\n    psCommand += `$speak.Speak([Console]::In.ReadToEnd());$speak.Dispose()`\n\n    pipedData += text\n    args.push(psCommand)\n    options.shell = true\n\n    return { command: COMMAND, args, pipedData, options }\n  }\n\n  runStopCommand () {\n    this.child.stdin.pause()\n    childProcess.exec(`taskkill /pid ${this.child.pid} /T /F`)\n  }\n\n  convertSpeed (speed) {\n    // Overriden to map playback speed (as a ratio) to Window's values (-10 to 10, zero meaning x1.0)\n    return Math.max(-10, Math.min(Math.round((9.0686 * Math.log(speed)) - 0.1806), 10))\n  }\n\n  getVoices () {\n    let args = []\n    let psCommand = 'Add-Type -AssemblyName System.speech;$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer;$speak.GetInstalledVoices() | % {$_.VoiceInfo.Name}'\n    args.push(psCommand)\n    return { command: COMMAND, args }\n  }\n}\n\nmodule.exports = SayPlatformWin32\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}