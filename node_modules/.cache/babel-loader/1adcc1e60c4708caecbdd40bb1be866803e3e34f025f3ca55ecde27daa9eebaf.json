{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SAKSHI SINGH\\\\OneDrive\\\\Desktop\\\\test-master\\\\src\\\\components\\\\MergeSort.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport mergeSortSound from '../assets/mergeSortSound.mp3';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MergeSort = () => {\n  _s();\n  const myState = useSelector(state => state.updateProps);\n  const dispatch = useDispatch();\n  const [audio] = useState(() => new Audio(mergeSortSound));\n  let values = myState.values.map(item => item[0]);\n  let ids = myState.values.map(item => item[1]);\n  const mergeSort = (values, ids, timer, l, r) => {\n    if (l >= r) return;\n    let mid = Math.floor((l + r) / 2);\n    mergeSort(values, ids, timer - 1, l, mid);\n    mergeSort(values, ids, timer - 1, mid + 1, r);\n    setTimeout(() => {\n      let color = [];\n      for (let i = 0; i < 3; i++) color.push(Math.floor(Math.random() * 200));\n      for (let i = l; i <= r; i++) document.getElementById(ids[i]).childNodes[1].style.backgroundColor = `rgb(${color[0]},${color[1]},${color[2]})`;\n      for (let i = l; i <= r; i++) {\n        for (let j = i + 1; j <= r; j++) {\n          if (values[i] > values[j]) {\n            [values[i], values[j]] = [values[j], values[i]];\n            [ids[i], ids[j]] = [ids[j], ids[i]];\n            let new_ids = [...ids];\n            document.getElementById(new_ids[i]).style.transform = `translateX(${i * 11}px)`;\n            document.getElementById(new_ids[j]).style.transform = `translateX(${j * 11}px)`;\n          }\n        }\n      }\n    }, timer * myState.speed * 5);\n  };\n  const solve = () => {\n    mergeSort(values, ids, Math.ceil(Math.log(values.length + 1)), 0, values.length - 1);\n    setTimeout(() => {\n      dispatch({\n        type: 'PLAY_PAUSE',\n        _play: false\n      });\n      dispatch({\n        type: 'UPDATE_COLOR',\n        color: 'rgb(0, 182, 0)'\n      });\n    }, 5 * myState.speed * (1 + Math.ceil(Math.log(values.length + 1))) + 50);\n  };\n  useEffect(() => {\n    if (myState.algorithm === 'merge') {\n      if (myState.play) {\n        solve();\n      }\n    }\n  }, [myState.play]);\n  useEffect(() => {\n    // Function to display toast notification\n    const displayNotification = value => {\n      toast.success(`${value} is sorted`, {\n        position: toast.POSITION.TOP_RIGHT\n      });\n    };\n\n    // Add event listener for when value changes\n    values.forEach(value => {\n      displayNotification(value);\n    });\n  }, [values]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(MergeSort, \"0xlcI8IEvfg9o0Jz7CIZh/Q7yIs=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = MergeSort;\nexport default MergeSort;\nvar _c;\n$RefreshReg$(_c, \"MergeSort\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","mergeSortSound","ToastContainer","toast","jsxDEV","_jsxDEV","Fragment","_Fragment","MergeSort","_s","myState","state","updateProps","dispatch","audio","Audio","values","map","item","ids","mergeSort","timer","l","r","mid","Math","floor","setTimeout","color","i","push","random","document","getElementById","childNodes","style","backgroundColor","j","new_ids","transform","speed","solve","ceil","log","length","type","_play","algorithm","play","displayNotification","value","success","position","POSITION","TOP_RIGHT","forEach","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SAKSHI SINGH/OneDrive/Desktop/test-master/src/components/MergeSort.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport mergeSortSound from '../assets/mergeSortSound.mp3';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst MergeSort = () => {\n  const myState = useSelector((state) => state.updateProps);\n  const dispatch = useDispatch();\n  const [audio] = useState(() => new Audio(mergeSortSound));\n\n  let values = myState.values.map((item) => item[0]);\n  let ids = myState.values.map((item) => item[1]);\n\n  const mergeSort = (values, ids, timer, l, r) => {\n    if (l >= r) return;\n\n    let mid = Math.floor((l + r) / 2);\n\n    mergeSort(values, ids, timer - 1, l, mid);\n    mergeSort(values, ids, timer - 1, mid + 1, r);\n\n    setTimeout(() => {\n      let color = [];\n      for (let i = 0; i < 3; i++) color.push(Math.floor(Math.random() * 200));\n\n      for (let i = l; i <= r; i++)\n        document.getElementById(ids[i]).childNodes[1].style.backgroundColor = `rgb(${color[0]},${color[1]},${color[2]})`;\n\n      for (let i = l; i <= r; i++) {\n        for (let j = i + 1; j <= r; j++) {\n          if (values[i] > values[j]) {\n            [values[i], values[j]] = [values[j], values[i]];\n            [ids[i], ids[j]] = [ids[j], ids[i]];\n\n            let new_ids = [...ids];\n\n            document.getElementById(new_ids[i]).style.transform = `translateX(${i * 11}px)`;\n            document.getElementById(new_ids[j]).style.transform = `translateX(${j * 11}px)`;\n          }\n        }\n      }\n    }, timer * myState.speed * 5);\n  };\n\n  const solve = () => {\n    mergeSort(values, ids, Math.ceil(Math.log(values.length + 1)), 0, values.length - 1);\n\n    setTimeout(() => {\n      dispatch({\n        type: 'PLAY_PAUSE',\n        _play: false,\n      });\n\n      dispatch({\n        type: 'UPDATE_COLOR',\n        color: 'rgb(0, 182, 0)',\n      });\n    }, 5 * myState.speed * (1 + Math.ceil(Math.log(values.length + 1))) + 50);\n  };\n\n  useEffect(() => {\n    if (myState.algorithm === 'merge') {\n      if (myState.play) {\n        solve();\n      }\n    }\n  }, [myState.play]);\n\n  useEffect(() => {\n    // Function to display toast notification\n    const displayNotification = (value) => {\n      toast.success(`${value} is sorted`, {\n        position: toast.POSITION.TOP_RIGHT,\n      });\n    };\n\n    // Add event listener for when value changes\n    values.forEach((value) => {\n      displayNotification(value);\n    });\n  }, [values]);\n\n  return (\n    <>\n      <ToastContainer />\n    </>\n  );\n};\n\nexport default MergeSort;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}